name: Sync upstream repository

on:
  schedule:
    - cron: '0 2 * * *'  # каждый день в 2:00
  workflow_dispatch:

jobs:
  sync-upstream:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout corporate repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/rosetta-models/blank-base-model.git || true
          git fetch upstream master

      - name: Checkout feature/upstream-updates branch
        run: git checkout feature/upstream-updates

      - name: Determine new commits
        id: new_commits
        run: |
          COMMITS=$(comm -23 <(git rev-list upstream/main | sort) <(git rev-list feature/upstream-updates | sort) | tr '\n' ' ')
          echo "new_commits=$COMMITS" >> $GITHUB_ENV
          echo "Found $(echo "$COMMITS" | wc -w) new commits"

    - name: Cherry-pick new commits
        if: env.new_commits != ''
        run: |
          # Полностью сбрасываем зависший cherry-pick
          git reset --hard || true
          git update-ref -d CHERRY_PICK_HEAD || true

          for c in ${{ env.new_commits }}; do
            echo "Applying commit $c"
            # Пробуем cherry-pick, если конфликт — жёстко перетираем всё из коммита
            while ! git cherry-pick "$c"; do
              echo "⚠️ Conflict detected. Force overwriting with theirs..."
              git checkout --theirs . || true
              git add -A || true
              git cherry-pick --continue || git cherry-pick --skip || break
            done
          done

      - name: Push changes
        if: env.new_commits != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push https://x-access-token:${GH_TOKEN}@github.com/<org>/company-blank-base-model.git feature/upstream-updates


---
      - name: Fetch upstream
        run: |
          git fetch upstream master

      - name: Determine new commits
        id: new_commits
        run: |
          # Берём все обычные коммиты из upstream/master, которых нет в текущей ветке (merge-коммиты исключаем)
          COMMITS=$(git rev-list upstream/master ^HEAD --no-merges)
          echo "new_commits=$COMMITS" >> $GITHUB_ENV
          echo "Found $(echo "$COMMITS" | wc -w) new commits"

      - name: Cherry-pick new commits (force overwrite)
        if: env.new_commits != ''
        run: |
          # Чистим возможный зависший cherry-pick
          git reset --hard || true
          git update-ref -d CHERRY_PICK_HEAD || true

          # Применяем все коммиты один за другим
          for c in ${{ env.new_commits }}; do
            echo "Applying commit $c"
            # Любые конфликты автоматически перетираются их версией
            while ! git cherry-pick "$c"; do
              echo "⚠️ Conflict detected. Force overwriting everything with theirs..."
              git checkout --theirs . || true
              git add -A || true
              git cherry-pick --continue || git cherry-pick --skip || break
            done
          done

----

git fetch upstream --prune

$branches = git branch -r | Where-Object { $_ -match '^  upstream/' -and $_ -notmatch '->' } |
    ForEach-Object { ($_ -replace '^\s*upstream/', '').Trim() }

foreach ($branch in $branches) {
    Write-Host "Tracking branch: $branch"
    git branch --track $branch "upstream/$branch" 2>$null
}


# Обновить все локальные ветки содержимым из upstream
foreach ($branch in (git branch --format='%(refname:short)')) {
    git switch $branch
    git pull --ff-only upstream $branch 2>$null
}

# Затем запушить всё в origin
git push origin --all
git push origin --tags

---


name: Sync Upstream Branches

on:
  workflow_dispatch:  # можно запускать вручную
  schedule:
    - cron: '0 4 * * *' # опционально: ежедневный запуск в 4 утра UTC

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # чтобы видеть все ветки

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/rosetta-models/common-domain-model.git || true
          git fetch upstream --prune --tags

      - name: Sync all branches except master
        run: |
          set -euo pipefail

          # Получаем список всех веток upstream
          branches=$(git branch -r | grep '^  upstream/' | grep -v '->' | sed 's/^  upstream\///')

          for branch in $branches; do
            echo "→ Processing branch: $branch"

            # Пропускаем master
            if [[ "$branch" == "master" ]]; then
              echo "⚠️  Skipping protected branch: $branch"
              continue
            fi

            # Создаём локальную tracking-ветку, если её нет
            if ! git show-ref --verify --quiet refs/heads/$branch; then
              echo "→ Creating local branch $branch tracking upstream/$branch"
              git branch --track "$branch" "upstream/$branch" || true
            fi

            # Обновляем ветку
            git switch "$branch" >/dev/null 2>&1 || git checkout -B "$branch" "upstream/$branch"
            git pull --ff-only upstream "$branch" || true

            # Пушим в origin
            echo "→ Pushing $branch to origin"
            git push origin "$branch"
          done

          echo "→ Syncing tags..."
          git push origin --tags

          echo "✅ All branches (except master) synced successfully!"

---

      - name: Sync upstream master into temp branch
        shell: bash
        run: |
          set -euo pipefail
          
          git fetch upstream master
          git switch -C sync-master upstream/master

      - name: Create PR to master
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: sync-master
          base: master
          title: "Sync upstream/master → master"
          body: "This PR updates master from upstream/master."
          delete-branch: true
