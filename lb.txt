name: Sync upstream repository

on:
  schedule:
    - cron: '0 2 * * *'  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00
  workflow_dispatch:

jobs:
  sync-upstream:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout corporate repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/rosetta-models/blank-base-model.git || true
          git fetch upstream master

      - name: Checkout feature/upstream-updates branch
        run: git checkout feature/upstream-updates

      - name: Determine new commits
        id: new_commits
        run: |
          COMMITS=$(comm -23 <(git rev-list upstream/main | sort) <(git rev-list feature/upstream-updates | sort) | tr '\n' ' ')
          echo "new_commits=$COMMITS" >> $GITHUB_ENV
          echo "Found $(echo "$COMMITS" | wc -w) new commits"

    - name: Cherry-pick new commits
        if: env.new_commits != ''
        run: |
          # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–π cherry-pick
          git reset --hard || true
          git update-ref -d CHERRY_PICK_HEAD || true

          for c in ${{ env.new_commits }}; do
            echo "Applying commit $c"
            # –ü—Ä–æ–±—É–µ–º cherry-pick, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Äî –∂—ë—Å—Ç–∫–æ –ø–µ—Ä–µ—Ç–∏—Ä–∞–µ–º –≤—Å—ë –∏–∑ –∫–æ–º–º–∏—Ç–∞
            while ! git cherry-pick "$c"; do
              echo "‚ö†Ô∏è Conflict detected. Force overwriting with theirs..."
              git checkout --theirs . || true
              git add -A || true
              git cherry-pick --continue || git cherry-pick --skip || break
            done
          done

      - name: Push changes
        if: env.new_commits != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push https://x-access-token:${GH_TOKEN}@github.com/<org>/company-blank-base-model.git feature/upstream-updates


---
      - name: Fetch upstream
        run: |
          git fetch upstream master

      - name: Determine new commits
        id: new_commits
        run: |
          # –ë–µ—Ä—ë–º –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã –∏–∑ upstream/master, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–µ (merge-–∫–æ–º–º–∏—Ç—ã –∏—Å–∫–ª—é—á–∞–µ–º)
          COMMITS=$(git rev-list upstream/master ^HEAD --no-merges)
          echo "new_commits=$COMMITS" >> $GITHUB_ENV
          echo "Found $(echo "$COMMITS" | wc -w) new commits"

      - name: Cherry-pick new commits (force overwrite)
        if: env.new_commits != ''
        run: |
          # –ß–∏—Å—Ç–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–π –∑–∞–≤–∏—Å—à–∏–π cherry-pick
          git reset --hard || true
          git update-ref -d CHERRY_PICK_HEAD || true

          # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
          for c in ${{ env.new_commits }}; do
            echo "Applying commit $c"
            # –õ—é–±—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ç–∏—Ä–∞—é—Ç—Å—è –∏—Ö –≤–µ—Ä—Å–∏–µ–π
            while ! git cherry-pick "$c"; do
              echo "‚ö†Ô∏è Conflict detected. Force overwriting everything with theirs..."
              git checkout --theirs . || true
              git add -A || true
              git cherry-pick --continue || git cherry-pick --skip || break
            done
          done

----


MongoDB Ops Manager ‚Äî Adjusting and Verifying pointInTimeWindowHours (PITR)
üìò Purpose

The pointInTimeWindowHours parameter defines how long Ops Manager retains oplog slices used for Point-in-Time Restore (PITR).
If set to 0, PITR is disabled, and Ops Manager only keeps regular snapshots ‚Äî no oplog data is continuously stored in the OplogStore.

1. Get Required Identifiers
üîπ Project ID (GROUP-ID)

Open your project in Ops Manager.

Copy the project ID from the URL, for example:
https://opsmanager.example.com/v2/#/groups/665f98c9d4d1230001b1b9d9/overview
‚Üí 665f98c9d4d1230001b1b9d9 is your GROUP-ID.

Alternatively, via API:
curl -u "PUBLIC_KEY:PRIVATE_KEY" --digest \
  -X GET "https://opsmanager.example.com/api/public/v1.0/groups"

Cluster ID (CLUSTER-ID)
List all backup configurations for the project:
curl -u "PUBLIC_KEY:PRIVATE_KEY" --digest \
  -X GET "https://opsmanager.example.com/api/public/v1.0/groups/{GROUP-ID}/backupConfigs"


Look for your cluster name, then take the clusterId field.
Example:
{
  "clusterId": "665fa1e9d4d1230001b1c1f3",
  "clusterName": "UAT-ReplicaSet"
}


2. Check Current PITR Window
curl -u "PUBLIC_KEY:PRIVATE_KEY" --digest -s \
  -H "Accept: application/json" \
  -X GET "https://opsmanager.example.com/api/public/v1.0/groups/{GROUP-ID}/backupConfigs/{CLUSTER-ID}/snapshotSchedule" \
  | jq '.pointInTimeWindowHours'

Example output:
24

3. Update PITR Window (Disable PITR)
To disable PITR completely:
curl -u "PUBLIC_KEY:PRIVATE_KEY" --digest \
  -H "Content-Type: application/json" \
  -X PATCH \
  "https://opsmanager.example.com/api/public/v1.0/groups/{GROUP-ID}/backupConfigs/{CLUSTER-ID}/snapshotSchedule" \
  -d '{
    "pointInTimeWindowHours": 0
  }'


4. Verify the Change
Run again
curl -u "PUBLIC_KEY:PRIVATE_KEY" --digest -s \
  -H "Accept: application/json" \
  -X GET "https://opsmanager.example.com/api/public/v1.0/groups/{GROUP-ID}/backupConfigs/{CLUSTER-ID}/snapshotSchedule" \
  | jq '.pointInTimeWindowHours'

Expected output: 0



Validation in UI

In Ops Manager UI:

Go to Deployment ‚Üí Backups ‚Üí Snapshot Schedules.

Select your cluster.

Under Point-in-Time Restore, the field
‚ÄúAllow point-in-time restores going back‚Äù should now show
‚ÄúDisabled‚Äù or 0/24 (temporary state until full sync).


Notes

When pointInTimeWindowHours = 0, Ops Manager stops storing oplog slices in the OplogStore, significantly reducing backup storage usage.
The cluster‚Äôs local MongoDB oplogSizeMB parameter is not affected ‚Äî it‚Äôs internal to the replica set.
The change only impacts Ops Manager‚Äôs backup system, not the MongoDB instance itself.
