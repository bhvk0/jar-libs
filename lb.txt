name: Sync upstream repository

on:
  schedule:
    - cron: '0 2 * * *'  # каждый день в 2:00
  workflow_dispatch:

jobs:
  sync-upstream:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout corporate repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/rosetta-models/blank-base-model.git || true
          git fetch upstream master

      - name: Checkout feature/upstream-updates branch
        run: git checkout feature/upstream-updates

      - name: Determine new commits
        id: new_commits
        run: |
          COMMITS=$(comm -23 <(git rev-list upstream/main | sort) <(git rev-list feature/upstream-updates | sort) | tr '\n' ' ')
          echo "new_commits=$COMMITS" >> $GITHUB_ENV
          echo "Found $(echo "$COMMITS" | wc -w) new commits"

    - name: Cherry-pick new commits
        if: env.new_commits != ''
        run: |
          # Полностью сбрасываем зависший cherry-pick
          git reset --hard || true
          git update-ref -d CHERRY_PICK_HEAD || true

          for c in ${{ env.new_commits }}; do
            echo "Applying commit $c"
            # Пробуем cherry-pick, если конфликт — жёстко перетираем всё из коммита
            while ! git cherry-pick "$c"; do
              echo "⚠️ Conflict detected. Force overwriting with theirs..."
              git checkout --theirs . || true
              git add -A || true
              git cherry-pick --continue || git cherry-pick --skip || break
            done
          done

      - name: Push changes
        if: env.new_commits != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push https://x-access-token:${GH_TOKEN}@github.com/<org>/company-blank-base-model.git feature/upstream-updates


---
      - name: Fetch upstream
        run: |
          git fetch upstream master

      - name: Determine new commits
        id: new_commits
        run: |
          # Берём все обычные коммиты из upstream/master, которых нет в текущей ветке (merge-коммиты исключаем)
          COMMITS=$(git rev-list upstream/master ^HEAD --no-merges)
          echo "new_commits=$COMMITS" >> $GITHUB_ENV
          echo "Found $(echo "$COMMITS" | wc -w) new commits"

      - name: Cherry-pick new commits (force overwrite)
        if: env.new_commits != ''
        run: |
          # Чистим возможный зависший cherry-pick
          git reset --hard || true
          git update-ref -d CHERRY_PICK_HEAD || true

          # Применяем все коммиты один за другим
          for c in ${{ env.new_commits }}; do
            echo "Applying commit $c"
            # Любые конфликты автоматически перетираются их версией
            while ! git cherry-pick "$c"; do
              echo "⚠️ Conflict detected. Force overwriting everything with theirs..."
              git checkout --theirs . || true
              git add -A || true
              git cherry-pick --continue || git cherry-pick --skip || break
            done
          done

